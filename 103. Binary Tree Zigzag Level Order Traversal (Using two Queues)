/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> list = new ArrayList();
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if(root == null) return list;
        Stack<TreeNode> stack1 = new Stack();
        Stack<TreeNode> stack2 = new Stack();
        stack1.push(root);
        
        while(!stack1.isEmpty() || !stack2.isEmpty()){
            List<Integer> l = new ArrayList();
            while(!stack1.isEmpty()){
                TreeNode node = stack1.pop();
                
                l.add(node.val);
                if(node.left != null) stack2.push(node.left);
                if(node.right != null) stack2.push(node.right);
            }
            list.add(l);
            List<Integer> l1 = new ArrayList();
            while(!stack2.isEmpty()){
                TreeNode node = stack2.pop();
                l1.add(node.val);
                if(node.right != null) stack1.push(node.right);
                if(node.left != null) stack1.push(node.left);
                
            }
            if(!l1.isEmpty()){
                list.add(l1);
            }
            
            
        }
        return list;
    }
}
