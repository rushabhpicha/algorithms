class MovingAverage {

    /** Initialize your data structure here. */
    List<Integer> list = new ArrayList();
    int size;
    public MovingAverage(int size) {
        this.size = size;
    }
    
    public double next(int val) {
        if(list.size() < size){
            list.add(val);
            return (double)listSum(list)/list.size();
        }
        if(list.size() == size){
            list.remove(0);
            list.add(val);
            return (double)listSum(list)/list.size();
        }
        return 0.0;
        
    }
    public int listSum(List<Integer> list){
        int sum = 0;
        for(int i = 0; i<list.size(); i++) {
            sum+=list.get(i);
        }
        return sum;
    }
}

/**
 * Your MovingAverage object will be instantiated and called as such:
 * MovingAverage obj = new MovingAverage(size);
 * double param_1 = obj.next(val);
 */

 //Second solution using queue
 class MovingAverage {

    /** Initialize your data structure here. */
    Queue<Integer> queue = new LinkedList();
    int size;
    int sum = 0;
    public MovingAverage(int size) {
        this.size = size;
    }
    
    public double next(int val) {
        
        if(queue.size() < size){
            queue.add(val);
            sum+= val;
                        return (1.0) * sum/queue.size();

        }
        else{
            sum = sum - queue.poll();
            queue.peek();
            queue.add(val);
            sum += val;
            return (1.0) * sum/queue.size();
            
        }
    }
    
}

/**
 * Your MovingAverage object will be instantiated and called as such:
 * MovingAverage obj = new MovingAverage(size);
 * double param_1 = obj.next(val);
 */