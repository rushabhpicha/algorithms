/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> list = new ArrayList();
    public int maxAncestorDiff(TreeNode root) {
        helper(root, new ArrayList<Integer>());
        int ans = Integer.MIN_VALUE;
        for(int i = 0; i<list.size(); i++){
            List<Integer> demo = list.get(i);
            Collections.sort(demo);
            ans = Math.max(ans, Math.abs(demo.get(0) - demo.get(demo.size() - 1)));
        }
        
        return ans;
        
    }
    
    void helper(TreeNode root, List<Integer> l){
        if(root == null) return;
      
        l.add(root.val);
          if(root.left == null && root.right == null){
            list.add(new ArrayList(l));
        } 
        helper(root.left, l);
        helper(root.right, l);
        l.remove(l.size() - 1);
    }
}
