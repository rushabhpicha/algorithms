/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        Queue<Node> queue = new LinkedList();
        List<List<Integer>> list = new ArrayList();
        if(root == null) return list;
        queue.add(root);
        int level = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            list.add(new ArrayList<Integer>());
            
            for(int i = 0; i<size; i++){
                Node node = queue.poll();
                list.get(level).add(node.val);
                
                for(Node child : node.children) queue.add(child);
            }
            level++;
        }
        return list;
    }
}
