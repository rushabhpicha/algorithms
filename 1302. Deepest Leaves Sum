/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> list = new ArrayList();
    public int deepestLeavesSum(TreeNode root) {
        int ans = 0;
        if(root == null) return 0;
        
        Queue<TreeNode> queue = new LinkedList();
        queue.add(root);
        while(queue.size() > 0){
            int size = queue.size();
            List<Integer> l = new ArrayList();
            for(int i = 0; i<size; i++){
                root = queue.poll();
                l.add(root.val);
                if(root.left != null) queue.add(root.left);
                if(root.right != null) queue.add(root.right);
            }
            list.add(l);
        }
        List<Integer> res = list.get(list.size() - 1);
        for(int i = 0; i<res.size(); i++){
            ans+=res.get(i);
        }
        return ans;
    }
}
