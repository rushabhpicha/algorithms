/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<Integer> preorder(Node root) {
       
        Deque<Node> stack = new LinkedList();
        List<Integer> list = new ArrayList();
        if(root == null) return list;
        stack.addFirst(root);
        while(!stack.isEmpty()){
            root = stack.pollLast();
            list.add(root.val);
            for(int i = root.children.size() - 1; i>=0; i--){
                stack.addLast(root.children.get(i));
            }
        }
        return list;
        
    }
    // void helper(Node root, List<Integer> list){
    //     list.add(root.val);
    //     int s = root.children.size();
    //     for(int i = 0; i<s; i++){
    //         helper(root.children.get(i), list);
    //     }
    // }
}
