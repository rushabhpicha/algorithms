/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    TreeNode ans = null;
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        HashMap<TreeNode, TreeNode> map = new HashMap();
        Queue<TreeNode> queue = new LinkedList();
        queue.add(root);
        map.put(root, null);
        while(!queue.isEmpty()){
            TreeNode node = queue.poll();
            if(node.left != null){
                map.put(node.left, node);
                queue.add(node.left);
            } 
            if(node.right != null){
                map.put(node.right, node);
                queue.add(node.right);
            } 
        }
        HashSet<TreeNode> set = new HashSet();
        
        while(p != null){
            set.add(p);
            p = map.get(p);
        }
        while(q != null){
            if(set.contains(q)) return q;
            q = map.get(q);
        }
        return null;
    }

}
